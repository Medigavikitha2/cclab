                                              character count
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main() {
char msg[100],smsg[50],temp[50],rmsg[50];
char *token,*t;
int l,n;
printf("Enter message: ");
gets(msg);
printf("\nOriginal Message is: %s",msg);
token=strtok(msg," ");
while(token!=NULL) {
t=strtok(NULL," ");
l=strlen(token);
if(t==NULL)
	sprintf(temp,"%d%s",l+1,token);
else
	sprintf(temp,"%d%s%c",l+2,token,' ');
strcat(smsg,temp);
token=t;
}
printf("\nSender side message is: %s",smsg);
token=strtok(smsg," ");
while(token!=NULL) {
sscanf(token,"%d%s",&n,temp);
t=strtok(NULL," ");
if(t!=NULL)
	strcat(temp," ");
strcat(rmsg,temp);
token=t;
}
printf("\nReceiver side message: %s",rmsg);
return 0;
}





                                                 bitstuffing
#include<stdio.h>
#include<string.h>
int main() {
char data[100],sdata[200]="",dsdata[100];
int i,count=0,j=8;
printf("Enter the data: ");
scanf("%s",data);
strcat(sdata,"01111110");
for(i=0;i<strlen(data);i++) {
if(data[i]=='1') {
count++;
sdata[j++]=data[i];
}else {
count=0;
sdata[j++]=data[i];
}
if(count==5) {

count=0;
sdata[j++]='0';
}
}
sdata[j]='\0';
strcat(sdata,"01111110");
printf("Data after bit stuffing: %s\n",sdata);
j=0;
for(i=8;i<strlen(sdata)-8;i++) {
if(sdata[i]=='1') {
count++;
dsdata[j++]=sdata[i];
}else {
count=0;
dsdata[j++]=sdata[i];
}
if(count==5) {
count=0;
i++;
}
}
dsdata[j]='\0';
printf("Data after bit destuffing: %s\n",dsdata);
return 0;
}






                                    characterstuffing
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main() {
char msg[100],smsg[100],temp[100],rmsg[100];
char *token,*t;
int l,n,i=1,j=0;
printf("Enter message: ");
gets(msg);
printf("\nOriginal Message is: %s",msg);
smsg[0]='F';
while(msg[j]!='\0')
{
if(msg[j]=='F'||msg[j]=='E')
{
smsg[i++]='E';
smsg[i++]=msg[j++];
}
else 
		smsg[i++]=msg[j++];
}
smsg[i++]='F';smsg[i]='\0';
printf("\n message after stuff: %s",smsg);
i=0,j=0;
//destuffing
while(smsg[i]!='\0')
{
if((smsg[i]=='E' && smsg[i+1]=='F')||(smsg[i]=='E'&&smsg[i+1]=='E')) {
rmsg[j++]=smsg[++i];
i++;
}
else if(smsg[i]=='F')
i++;
else 
rmsg[j++]=smsg[i++];
}
printf("\nmessage after destuffing: %s",rmsg);
return 0;
}






                                             gobackn
#include<stdlib.h>
#include<stdio.h>
#include<time.h>
int main() {
int nf,N,i=0,x,j,flag;
srand(time(NULL));
printf("Enter the number of frames: ");
scanf("%d",&nf);
printf("Enter the Window size: ");
scanf("%d",&N);
while(i<nf)
{
x=0;
for(j=i;j<i+N&&j<nf;j++)
{
printf("sent Frame %d\n",j);
}
for(j=i;j<i+N&&j<nf;j++)
{
flag=rand()%2;
if(!flag)
{
printf("Acknowledgement %d\n",j+1);
x++;
}
else
{
printf("Frame %d Not Received\n",j);
printf("\nREtransmitting Window");
break;
}
}
printf("\n");
i+=x;
}
}





                                              selectiverepeat

#include<stdio.h>
int main()
{
int nf,N,x=0,i=1,f;
printf("enter no of frames: ");
scanf("%d", &nf);
printf("enter window size: ");
scanf("%d", &N);
for(int j=i;j<i+N&&j<=nf;j++)
{
printf("sent frame %d\n",j);
}
while(i<=nf)
{
x=0;
for(int j=i;j<i+N&&j<=nf;j++)
{
printf("Acknowledgement for frame %d: ",j);
scanf("%d",&f);
if(f==1)
{
printf("Ackowledgement for frame %d received\n",j);
x++;
if(j+N<=nf)
{
printf("sent frame %d\n",j+N);
}
}
else if(f==0)
{
printf("Frame %d not received\n",j);
while(1)
{
printf("Retransmitting frame\n");
printf("Acknowledgement for frame %d: ",j);
scanf("%d",&f);
if(f==1)
{
printf("Acknowledgement for frame %d received\n",j);
x++;
if(j+N<=nf)
{
printf("sent frame %d\n",j+N);
}
break;
}
}
}
}
i+=x;
}
}





                                                  dijkstra
#include<stdio.h>
#define INFINITY 9999
#define MAX 10
void dijkstra(int cost[MAX][MAX],int n,int startnode)
{
int distance[MAX],path[MAX];
int visited[MAX],count,mindistance,nextnode,i,j;
for(i=0;i<n;i++) {
distance[i]=cost[startnode][i];
path[i]=startnode;
visited[i]=0;
}
distance[startnode]=0;
visited[startnode]=1;
count=1;
while(count<n-1) {
mindistance=INFINITY;
for(i=0;i<n;i++) {
if(distance[i]<mindistance && !visited[i]) {
mindistance=distance[i];
nextnode=i;
}
}
visited[nextnode]=1;
for(i=0;i<n;i++) {
if(!visited[i]) {
if(mindistance+cost[nextnode][i]<distance[i]) {
distance[i]=mindistance+cost[nextnode][i];
path[i]=nextnode;
}
}
}
count++;
}
for(i=0;i<n;i++) {
if(i!=startnode) {
printf("\nDistance of node %d = %d",i,distance[i]);
printf("\n path=%d",i);
j=i;
do {
j=path[j];
printf("<- %d",j);
}
while(j!=startnode);
}
}
}
void main() {
int G[MAX][MAX],i,j,n,u;
printf("Enter the number of vertices:");
scanf("%d",&n);
printf("Enter the adjacency matrix:\n");
for(i=0;i<n;i++) {
for(j=0;j<n;j++) {
scanf("%d",&G[i][j]);
if(G[i][j]==0 && i!=j) {
G[i][j]=INFINITY;
}
}
}
printf("\n Enter the starting node: ");
scanf("%d",&u);
dijkstra(G,n,u);
}




                                          dvr
#include<stdio.h>
struct node{
    unsigned dist[20];
    unsigned form[20];
}rt[10];
int main(){
    int costmat[20][20];
    int i,j,k,nodes,count=0;
    printf("Enter the nodes: ");
    scanf("%d",&nodes);
    for(i=0;i<nodes;i++){
        for(j=0;j<nodes;j++){
            scanf("%d",&costmat[i][j]);
            costmat[i][i]=0;
            rt[i].dist[j]=costmat[i][j];
            rt[i].form[j]=j;
        }
    }
    do{
        count=0;
        for(i=0;i<nodes;i++)
            for(j=0;j<nodes;j++)
                for(k=0;k<nodes;k++)
                    if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j]){
                        rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
                        rt[i].form[j]=k;
                        count++;
                    }
        }while(count!=0);
        for(i=0;i<nodes;i++){
            printf("For rounter: %d\n",i+1);
        
        for(j=0;j<nodes;j++){
            printf("node %d via %d distance %d\n",j+1,rt[i].form[j]+1,rt[i].dist[j]);
        }
        }
    return 0;
}






                                       crc
#include<stdio.h>
#include<string.h>
int main()
{
	int i,j,msglen,keylen,flag=0;
	char msg[100],key[100],temp[100],quot[100],rem[100],key1[100],temp1[100];
	printf("Enter the data: ");
	scanf("%s",msg);
	printf("Enter the key(generator polynomial): ");
	scanf("%s",key);
	keylen=strlen(key);
	msglen=strlen(msg);
	if(msglen>keylen && key[0]=='1' && key[keylen-1]=='1') {
		strcpy(key1,key);
		for (i=0;i<keylen-1;i++) {
			msg[msglen+1]='0';
		}
		for(i=0;i<keylen;i++) {
			temp[i]=msg[i];
		}
		for(i=0;i<msglen;i++) {
			quot[i]=temp[0];
			if(quot[i]=='0') {
				for(j=0;j<keylen;j++) {
					key[j]='0';
				}
			} else {
				for(j=0;j<keylen;j++) {
					key[j]=key1[j];
				}
			}
			for(j=keylen-1;j>0;j--) {
				if(temp[j]==key[j]) {
					rem[j-1]='0';
				} else {
					rem[j-1]='1';
				}
			}
			rem[keylen-1]=msg[i+keylen];
			strcpy(temp,rem);
		}
		strcpy(rem,temp);
		printf("Quotient is : ");
		for(i=0;i<msglen;i++) {
			printf("%c",quot[i]);
		}
		printf("\nRemainder is : ");
		for(i=0;i<keylen-1;i++) {
			printf("%c",rem[i]);
		}
		printf("\nFinal data is : ");
		for(i=0;i<msglen;i++) {
			printf("%c",msg[i]);
		}
		for(i=0;i<keylen-1;i++) {
			printf("%c",rem[i]);
		}
		printf("\n");
		printf("\nEnter recieved data: ");
		scanf("%s",temp1);
		for(i=0;i<keylen;i++) {
			temp[i]=temp1[i];
		}
		for(i=0;i<msglen;i++) {
			quot[i]=temp[0];
			if(quot[i]=='0') {
				for(j=0;j<keylen;j++) {
					key[j]='0';
				}
			} else {
				for(j=0;j<keylen;j++) {
					key[j]=key1[j];
				}
			}
			for(j=keylen-1;j>0;j--) {
				if(temp[j]==key[j]) {
					rem[j-1]='0';
				} else {
					rem[j-1]='1';
				}
			}
			rem[keylen-1]=temp1[i+keylen];
			strcpy(temp,rem);
		}
		strcpy(rem,temp);
		printf("Quotient is : ");
		for(i=0;i<msglen;i++) {
			printf("%c",quot[i]);
		}
		printf("\nRemainder is : ");
		for(i=0;i<keylen-1;i++) {
			printf("%c",rem[i]);
		}
		flag=0;
		for(i=0;i<keylen-1;i++) {
			if(rem[i]=='1') {
				flag=1;
			} else {
				flag=0;
			}
		}
		if(flag==0) {
			printf("\nNo error\n");
		} else {
			printf("\nError is detected\n");
		}
	}
	else
	{
		printf("Invalid data");
	}
	return 0;
}

   






                                                      crc
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char msg[100],temp[100],temp1[100],rem[100],quot[100],key[100],key1[100];
    int msglen,keylen,i,j;
    printf("Enter Data: ");
    scanf("%s",msg);
    printf("Enter key: ");
    scanf("%s",key);
    msglen=strlen(msg);
    keylen=strlen(key);
    if(msglen<keylen){
        printf("Invalid options");
    }
    else{
        strcpy(key1,key);
        for(i=0;i<keylen-1;i++){
            msg[msglen+i]='0';
        }
        for(i=0;i<keylen;i++){
            temp[i]=msg[i];
        }
        for(i=0;i<msglen;i++){
            quot[i]=temp[0];
            if(quot[i]=='0'){
                for(j=0;j<keylen;j++){
                    key[j]='0';
                }
            }
            else{
                for(j=0;j<keylen;j++){
                 key[j]=key1[j];   
                }
            }
            for(j=keylen-1;j>0;j--){
                if(temp[j]==key[j]){
                    rem[j-1]='0';
                }
                else{
                    rem[j-1]='1';
                }
            }
                rem[keylen-1]=msg[keylen+i];
                strcpy(temp,rem);
        }
        strcpy(rem,temp);
        printf("Quotient");
        for(i=0;i<msglen;i++){
            printf("%c",quot[i]);
        }
        printf("\n");
        printf("Remainder");
        for(i=0;i<keylen;i++){
            printf("%c",rem[i]);
        }
        printf("\n");
        printf("Final Msg");
        for(i=0;i<msglen;i++){
            printf("%c",msg[i]);
        }
        for(i=0;i<keylen;i++){
            printf("%c",rem[i]);
        }
        printf("\n");
        printf("enter recieved data: ");
        scanf("%s",temp1);
        for(i=0;i<keylen;i++){
            temp[i]=temp1[i];
        }
        for(i=0;i<msglen;i++){
            quot[i]=temp[0];
            if(quot[i]=='0'){
                for(j=0;j<keylen;j++){
                    key[j]='0';
                }
            }
            else{
                for(j=0;j<keylen;j++){
                 key[j]=key1[j]  ; 
                }
            }
            for(j=keylen-1;j>0;j--){
                if(temp[j]==key[j]){
                    rem[j-1]='0';
                }
                else{
                    rem[j-1]='1';
                }
            }
                rem[keylen-1]=temp1[keylen+i];
                strcpy(temp,rem);
        }
        strcpy(rem,temp);
        printf("Quotient");
        for(i=0;i<msglen;i++){
            printf("%c",quot[i]);
        }
        printf("\n");
        printf("Remainder");
        for(i=0;i<keylen;i++){
            printf("%c",rem[i]);
        }
        int flag=0;
        for(i=0;i<keylen-1;i++){
            if (rem[i]=='1'){
                flag=1;
            }
            else
                flag=0;
        }
        if(flag==0){
            printf("Valid");
        }
        else{
            printf("Error");
        }
        printf("\n");
        
    }
    return 0;
}






                                               leakybucket
#include <stdio.h>
int main() {
    // Write C code here
    int drop=0,nsec,bcount=0,bsize,inp[25],pr,i,prate,sent;
    printf("Enter bucket size in kb: \n");
    scanf("%d",&bsize);
    printf("Enter processing rate in mbps: \n");
    scanf("%d",&pr);
    prate=125*pr;
    printf("Enter the number of seconds u want to simulate: \n");
    scanf("%d",&nsec);
    for(i=0;i<nsec;i++){
        printf("Enter the size of packet entering at %d sec: ",i+1);
        scanf("%d",&inp[i]);
    }
    for(i=0;i<nsec;i++){
        bcount+=inp[i];
        if(bcount>bsize){
            drop=bcount-bsize;
            bcount=bsize;
        }
        printf("at %d sec:\n",i+1);
        printf("data burst received in kb: %d\n",inp[i]);
        sent=(bcount<prate)?bcount:prate;
        printf("data sent: %d\n",sent);
        bcount=bcount-sent;
        printf("data left: %d\n",bcount);
        printf("data dropped: %d\n",drop);
        drop=0;
    }
    if(bcount!=0){
        printf("data %d is sent at %d rate\n",bcount,pr);
    }
    printf("transmission completed successfully");
    return 0;
}


                                                   nmap
sudo apt-get install nmap
nmap
ifconfig
nmap -sP inetadd
sudo nmap -sT inet
sudo nmap -sT -P 80,443 inet
man nmap
quit
nmap -O -sV inet
sudo nmap -O -sV inet
nmap inet






                                                  Week 13
# first.tcl
set ns [new Simulator]
$ns color 1 Blue
$ns color 2 Red
set nf [open out.nam w]
$ns namtrace-all $nf
proc finish {} {
global ns nf
$ns flush-trace
close $nf
exec nam out.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
$ns duplex-link $n0 $n2 20Mb 10ms DropTail
$ns duplex-link $n1 $n2 20Mb 10ms DropTail
$ns duplex-link $n2 $n3 5Mb 20ms DropTail
$ns duplex-link-op $n0 $n2 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up
$ns duplex-link-op $n2 $n3 orient right
set tcp [new Agent/TCP]
$tcp set class_ 2
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n3 $sink
$ns connect $tcp $sink
$tcp set fid_ 1
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP
$ftp set packet_size_ 1000
$ftp set rate_ 1Mb
set udp [new Agent/UDP]
$ns attach-agent $n1 $udp
# Replace Agent/NULL with Agent/TCPSink or similar, if needed
set null [new Agent/Null]
$ns attach-agent $n3 $null
$ns connect $udp $null
$udp set fid_ 2
set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$cbr set type_ CBR
$cbr set packet_size_ 1000
$cbr set rate_ 1Mb
$ns at 1.0 "$ftp start"
$ns at 2.0 "$ftp stop"
$ns at 1.5 "$cbr start"
$ns at 8.0 "$cbr stop"
$ns at 5.0 "finish"
$ns run



                                             trace.tcl

set ns [new Simulator]

$ns color 1 Blue
$ns color 2 Red

set nt [open out.tr w]
$ns trace-all $nt

proc finish {} {
	global ns nt
	$ns flush-trace
	close $nt
	exec awk -f loss.awk out.tr &
	exit 0
}

set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]

$ns duplex-link $n0 $n2 20Mb 10ms DropTail
$ns duplex-link $n1 $n2 20Mb 10ms DropTail
$ns duplex-link $n2 $n3 5Mb 20ms DropTail

$ns queue-limit $n2 $n3 5

$ns duplex-link-op $n0 $n2 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up
$ns duplex-link-op $n2 $n3 orient right

set tcp [new Agent/TCP]
$tcp set class_ 2
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n3 $sink
$ns connect $tcp $sink
$tcp set fid_ 1

set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP
$ftp set packet_size_ 1000
$ftp set rate_ 1mb

set udp [new Agent/UDP]
$ns attach-agent $n1 $udp
set null [new Agent/Null]
$ns attach-agent $n3 $null
$ns connect $udp $null
$udp set fid_ 2

set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$cbr set type_ CBR
$cbr set packet_size_ 1000
$cbr set rate_ 1mb

$ns at 1.0 "$ftp start"
$ns at 2.0 "$ftp stop"
$ns at 1.5 "$cbr start"
$ns at 3.0 "$cbr stop"

$ns at 5.0 "finish"
$ns run





                              loss1.awk


BEGIN {
drop=0
}
{
if($1=="d" && $4==3) {
drop++
}
}
END {
printf("No.of packets dropped: %d",drop)
}

                                          loss.awk

BEGIN {
tdrop=0
udrop=0
}
{

if($1=="d" && $4==3 && $5=="tcp") {
tdrop++
}
if($1=="d" && $4==3 && $5=="cbr") {
udrop++
}
}
END {
printf("No.of tcp packets dropped: %d",tdrop)
printf("No.of udp packets dropped: %d",udrop)
}


                                  throughput.awk

BEGIN {
fsize=0
stime=0
ftime=0
latency=0
flag=0
throughpu=0
}
{
if($1=="r" && $4==3) {
fsize+=$6
if(flag==0) {
stime=$2
flag=1
}
ftime=$2
}
}
END {

latency=ftime-stime
throughput=(fsize*8)/latency
printf("Latency: %f\n",latency)
printf("Throughput: %f\n",throughput)
}


































set ns [new Simulator]
$ns color 1 Blue
$ns color 2 Red
set nt [open out.tr w]
$ns trace-all $nt
proc finish {} {
global ns nt
$ns flush-trace
close $nt
exec awk-f loss1.awk out.tr &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
$ns duplex-link $n0 $n2 20Mb 10ms DropTail
$ns duplex-link $n1 $n2 20Mb 10ms DropTail
$ns duplex-link $n2 $n3 5Mb 20ms DropTail
$ns queue-limit $n2 $n3 5
$ns duplex-link-op $n0 $n2 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up
$ns duplex-link-op $n2 $n3 orient right
set tcp [new Agent/TCP]
$tcp set class_ 2
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n3 $sink
$ns connect $tcp $sink
$tcp set fid_ 1
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP
$ftp set packet_size_ 1000
$ftp set rate_ 1Mb
set udp [new Agent/UDP]
$ns attach-agent $n1 $udp
# Replace Agent/NULL with Agent/TCPSink or similar, if needed
set null [new Agent/Null]
$ns attach-agent $n3 $null
$ns connect $udp $null
$udp set fid_ 2
set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$cbr set type_ CBR
$cbr set packet_size_ 1000
$cbr set rate_ 1Mb
$ns at 1.0 "$ftp start"
$ns at 2.0 "$ftp stop"
$ns at 1.5 "$cbr start"
$ns at 8.0 "$cbr stop"
$ns at 5.0 "finish"
$ns run




          loss1.awk
BEGIN {
    drop=0
}
{
    if($1=="d" && $4==3) {
        drop++
    }
}
END{
    printf("No of packets dropped %d",drop)
}


             loss.awk
BEGIN {
    tdrop=0
    udrop=0
}
{
    if($1=="d" && $4==3 && $5=="tcp") {
        tdrop++
    }
    if($1=="d" && $4==3 && $5=="cbr") {
        udrop++
    }
}
END{
    printf("No of tcp packets dropped %d",tdrop)
    printf("No of ucp packets dropped %d",udrop)
}

              


                        throughput.awk
BEGIN {
    ftime=0
    stime=0
    fsize=0
    flag=0
    latency=0
    throughput=0
}
{
    if($1=="r" && $4==3) {
        fsize+=$6
        if(flag==0) {
            stime=$2
            flag=1
        }
        ftime=$2
    }
   
}
END{
    latency=ftime-stime
    throughput=(fsize*8)/latency
    printf("latency %f",latency)
    printf("throughput %f",throughput)
}
